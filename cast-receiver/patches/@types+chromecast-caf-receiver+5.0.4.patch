diff --git a/node_modules/@types/chromecast-caf-receiver/cast.framework.d.ts b/node_modules/@types/chromecast-caf-receiver/cast.framework.d.ts
index 923c1c3..a6363e3 100644
--- a/node_modules/@types/chromecast-caf-receiver/cast.framework.d.ts
+++ b/node_modules/@types/chromecast-caf-receiver/cast.framework.d.ts
@@ -1128,12 +1128,12 @@ export class CastReceiverContext {
     /**
      * Sets message listener on custom message channel.
      */
-    addCustomMessageListener(namespace: string, listener: EventHandler): void;
+    addCustomMessageListener(namespace: string, listener: SystemEventHandler): void;
 
     /**
      * Add listener to cast system events.
      */
-    addEventListener(type: system.EventType | system.EventType[], handler: EventHandler): void;
+    addEventListener(type: system.EventType | system.EventType[], handler: SystemEventHandler): void;
 
     /**
      * Checks if the given media params of video or audio streams are supported by the platform.
@@ -1196,12 +1196,12 @@ export class CastReceiverContext {
     /**
      * Remove a message listener on custom message channel.
      */
-    removeCustomMessageListener(namespace: string, listener: EventHandler): void;
+    removeCustomMessageListener(namespace: string, listener: SystemEventHandler): void;
 
     /**
      * Remove listener to cast system events.
      */
-    removeEventListener(type: system.EventType, handler: EventHandler): void;
+    removeEventListener(type: system.EventType, handler: SystemEventHandler): void;
 
     /**
      * Sends a message to a specific sender or broadcasts it to all connected senders (to broadcast pass undefined as a senderId).
diff --git a/node_modules/@types/chromecast-caf-receiver/cast.framework.system.d.ts b/node_modules/@types/chromecast-caf-receiver/cast.framework.system.d.ts
index dc8059d..acdb6ed 100644
--- a/node_modules/@types/chromecast-caf-receiver/cast.framework.system.d.ts
+++ b/node_modules/@types/chromecast-caf-receiver/cast.framework.system.d.ts
@@ -52,6 +52,14 @@ export enum SystemState {
     STOPPING_IN_BACKGROUND = 'stoppinginbackground',
 }
 
+// Types of custom messages.
+export enum MessageType {
+  // Messages are free-form strings. The application is responsible for encoding/decoding the information transmitted.
+  STRING = 'string',
+  // Messages are JSON-encoded. The underlying transport will use a JSON encoded string.
+  JSON = 'json',
+}
+
 // Represents the current standby state reported by the platform. It may be UNKNOWN
 // if the cast platform was unable to determine the state yet.
 export enum StandbyState {
diff --git a/node_modules/@types/chromecast-caf-receiver/index.d.ts b/node_modules/@types/chromecast-caf-receiver/index.d.ts
index 9a9e603..8ab26e8 100644
--- a/node_modules/@types/chromecast-caf-receiver/index.d.ts
+++ b/node_modules/@types/chromecast-caf-receiver/index.d.ts
@@ -15,6 +15,7 @@
 
 import * as framework from './cast.framework';
 import { PlayerDataChangedEvent } from './cast.framework.ui';
+import { Event as SystemEvent } from './cast.framework.system';
 import {
     Event,
     Id3Event,
@@ -45,6 +46,7 @@ declare global {
     const cast: { framework: typeof framework };
 
     type EventHandler = (event: Event) => void;
+    type SystemEventHandler = (event: SystemEvent) => void;
     type Id3EventHandler = (event: Id3Event) => void;
     type ErrorEventHandler = (event: ErrorEvent) => void;
     type MediaElementEventHandler = (event: MediaElementEvent) => void;
